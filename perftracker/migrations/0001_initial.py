# Generated by Django 2.0.2 on 2018-03-12 04:15

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EnvNodeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='server1', max_length=128)),
                ('uuid', models.UUIDField(db_index=True, help_text='env node uuid')),
                ('version', models.CharField(blank=True, db_index=True, help_text='CentOS7, 3.10.0-693.17.1.el7.x86_64', max_length=128)),
                ('ip', models.CharField(blank=True, db_index=True, help_text='192.168.0.1', max_length=32)),
                ('hostname', models.CharField(blank=True, db_index=True, help_text='server1.intranet.localdomain', max_length=256)),
                ('params', models.CharField(blank=True, help_text='DMA disabled', max_length=512, null=True)),
                ('cpus', models.IntegerField(blank=True, help_text='32', null=True)),
                ('ram_mb', models.IntegerField(blank=True, help_text='131072', null=True)),
                ('disk_gb', models.IntegerField(blank=True, help_text='4096', null=True)),
                ('links', models.CharField(blank=True, help_text="{'grafana': 'http://192.168.100.1/grafana'}", max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='EnvNodeTypeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Host, KVM VM, k8s pod, docker image, cluster', max_length=64)),
                ('css', models.CharField(blank=True, help_text='glyphicon glyphicon-tasks', max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'Environment type',
                'verbose_name_plural': 'Environment types',
            },
        ),
        migrations.CreateModel(
            name='HwChassisModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(blank=True, db_index=True, help_text='Dell Rx730, Azure D3v2', max_length=64, null=True)),
                ('hw_uuid', models.CharField(blank=True, db_index=True, help_text='80A21512-79BA-12C3-0083-E12089140FA2', max_length=64, null=True)),
                ('serial_num', models.CharField(blank=True, help_text='123456-789', max_length=64, null=True)),
                ('numa_nodes', models.IntegerField(blank=True, help_text='Number of numa nodes', null=True)),
                ('ram_info', models.CharField(blank=True, help_text='DDR3 @ 1333MHz', max_length=64, null=True)),
                ('cpu_info', models.CharField(blank=True, help_text='Intel Xeon Processor E5450 12M Cache, 3.00 GHz, 1333 MHz FSB', max_length=128)),
            ],
            options={
                'verbose_name': 'Host',
                'verbose_name_plural': 'Hosts',
            },
        ),
        migrations.CreateModel(
            name='JobModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Job title', max_length=512)),
                ('cmdline', models.CharField(blank=True, help_text='Job cmdline', max_length=1024, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid1, editable=False, help_text='job uuid')),
                ('suite_name', models.CharField(help_text='Test suite name', max_length=128)),
                ('suite_ver', models.CharField(help_text='Test suite version', max_length=128)),
                ('author', models.CharField(blank=True, help_text='Job author: user@mycompany.localdomain', max_length=128, null=True)),
                ('product_name', models.CharField(blank=True, help_text='Tested product name', max_length=128, null=True)),
                ('product_ver', models.CharField(blank=True, help_text='Tested product version', max_length=128, null=True)),
                ('begin', models.DateTimeField(blank=True, help_text='Job begin datetime', null=True)),
                ('end', models.DateTimeField(blank=True, help_text='Job end datetime', null=True)),
                ('duration', models.DurationField(help_text='total execution time (sec)')),
                ('upload', models.DateTimeField(default=django.utils.timezone.now, help_text='Job upload datetime')),
                ('links', models.CharField(blank=True, help_text="{'link name': 'link url', 'link2': 'url2'}", max_length=1024, null=True)),
                ('tests_total', models.IntegerField(help_text='Total number of tests in the job', null=True)),
                ('tests_completed', models.IntegerField(help_text='Total number of tests completed', null=True)),
                ('tests_failed', models.IntegerField(default=0, help_text='Total number of failed tests', null=True)),
                ('tests_errors', models.IntegerField(default=0, help_text='Total number of tests with errors', null=True)),
                ('tests_warnings', models.IntegerField(default=0, help_text='Total number of tests with warnings', null=True)),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
            },
        ),
        migrations.CreateModel(
            name='ProjectModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Project name: Browsers, Clients, Servers...', max_length=64)),
                ('description', models.CharField(help_text='Project description', max_length=256)),
                ('nav_prio', models.IntegerField(help_text='Priority in the navigation dropdown list (1 - top, 100 - bottom)')),
                ('nav_visible', models.BooleanField(default=True, help_text='Do display in the navigation bar')),
            ],
            options={
                'verbose_name': 'PerfTracker Project',
                'verbose_name_plural': 'PerfTracker Projects',
            },
        ),
        migrations.CreateModel(
            name='TestGroupModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(db_index=True, default='', help_text='Test group tag: pagetests', max_length=128)),
                ('title', models.CharField(db_index=True, help_text='Test group name: Web page tests', max_length=128)),
                ('glyphicon', models.CharField(help_text='Bootstrap 3 glyphicon to use: glyphicon glyphicon-hdd', max_length=128)),
                ('icon', models.URLField(help_text='URL of the icon to be used', max_length=256)),
            ],
            options={
                'verbose_name': 'Test group',
                'verbose_name_plural': 'Test groups',
            },
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq_num', models.IntegerField(db_index=True, help_text='Test sequence number in the job')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid1, editable=False, help_text='test run uuid')),
                ('tag', models.CharField(db_index=True, help_text='Test tag used for resuts comparisons: Disk sequential read', max_length=512)),
                ('binary', models.CharField(help_text='Test binary: hdd_seq_read.exe', max_length=128)),
                ('cmdline', models.CharField(help_text='Test cmdline: -f /root/file/ -O 100M -s 1', max_length=1024)),
                ('group', models.CharField(help_text='Test group tag', max_length=128)),
                ('description', models.CharField(help_text='Test description: disk sequential read test by 1M blocks', max_length=1024)),
                ('scores', models.CharField(help_text='Raw test scores: [12.21, 14.23, 12.94]', max_length=1024)),
                ('scores_rejected', models.IntegerField(default=0, help_text='Number of scores rejected')),
                ('deviations', models.CharField(help_text='Test deviations: [0.02, 0.03, 0.01]', max_length=1024)),
                ('deviations_rejected', models.IntegerField(default=0, help_text='Number of deviations rejected')),
                ('category', models.CharField(help_text='Test category: 1-thread', max_length=128)),
                ('metrics', models.CharField(help_text='Test result metrics: MB/s', max_length=64)),
                ('links', models.CharField(help_text="Test links json: {'test logs': 'http://logs.localdomain/231241.log'}", max_length=1024)),
                ('less_better', models.BooleanField(help_text="Set to True if 'less' score is better")),
                ('errors', models.IntegerField(help_text='Number of test errors')),
                ('warnings', models.IntegerField(help_text='Number of test warnings')),
                ('begin', models.DateTimeField(help_text='Test begin time', null=True)),
                ('end', models.DateTimeField(help_text='Test end time', null=True)),
                ('loops', models.IntegerField(help_text='Test loops', null=True)),
                ('duration', models.DurationField(help_text='total execution time (sec)')),
                ('status', models.CharField(help_text="Test status: ['NOTTESTED', 'SKIPPED', 'INPROGRESS', 'SUCCESS', 'FAILED']", max_length=16)),
                ('avg_score', models.FloatField(null=True, verbose_name='Test average score: 13.02')),
                ('min_score', models.FloatField(null=True, verbose_name='Test min score: 12.21')),
                ('max_score', models.FloatField(null=True, verbose_name='Test max score: 14.23')),
                ('avg_dev', models.FloatField(null=True, verbose_name='Test average deviation: 0.02')),
                ('min_dev', models.FloatField(null=True, verbose_name='Test min deviation: 0.01')),
                ('max_dev', models.FloatField(null=True, verbose_name='Test max deviation: 0.03')),
                ('job', models.ForeignKey(help_text='Job instance', on_delete=django.db.models.deletion.CASCADE, to='perftracker.JobModel')),
            ],
            options={
                'verbose_name': 'Test result',
                'verbose_name_plural': 'Tests results',
            },
        ),
        migrations.AddField(
            model_name='jobmodel',
            name='project',
            field=models.ForeignKey(help_text='Job project', on_delete=django.db.models.deletion.CASCADE, to='perftracker.ProjectModel'),
        ),
        migrations.AddField(
            model_name='envnodemodel',
            name='hw_chassis',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='perftracker.HwChassisModel'),
        ),
        migrations.AddField(
            model_name='envnodemodel',
            name='job',
            field=models.ForeignKey(help_text='Job', on_delete=django.db.models.deletion.CASCADE, related_name='env_node', to='perftracker.JobModel'),
        ),
        migrations.AddField(
            model_name='envnodemodel',
            name='node_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='perftracker.EnvNodeTypeModel'),
        ),
        migrations.AddField(
            model_name='envnodemodel',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='perftracker.EnvNodeModel'),
        ),
    ]
